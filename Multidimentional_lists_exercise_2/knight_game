n = int(input())

matrix = []
knights = []

for row in range(n):
    matrix.append([x for x in input()])
    for col in range(n):
        if matrix[row][col] == 'K':
            knights.append([row, col])

removed_knights = 0
possible_moves = [(1, 2), (2, 1), (-1, 2), (-2, 1), (1, -2), (2, -1), (-1, -2), (-2, -1)]

while True:
    max_hits = 0
    max_knight = [0, 0]
    for k_row, k_col in knights:
        hits = 0
        for move in possible_moves:
            new_row = k_row + move[0]
            new_col = k_col + move[1]
            if 0 <= new_row < n and 0 <= new_col < n:
                if matrix[new_row][new_col] == 'K':
                    hits += 1
        if hits > max_hits:
            max_hits = hits
            max_knight = [k_row, k_col]

    if max_hits == 0:
        break
    knights.remove(max_knight)
    matrix[max_knight[0]][max_knight[1]] = '0'
    removed_knights += 1

print(removed_knights)


# rows = int(input())
# cols = rows
#
# pos_knights, matrix, total_knights = [], [], [0]
# for row in range(rows):
#     matrix.append(list(input()))
#     for col in range(cols):
#         if matrix[row][col] == 'K':
#             pos_knights.append([row, col])
#
#
# def check_valid_index(row, col):
#     if 0 <= row < rows and 0 <= col < cols:
#         return True
#
#
# movement = {
#     "up left": [-2, -1], "up right": [-2, 1], "down left": [2, -1], "down right": [2, 1],
#     "left up": [-1, -2], "left down": [1, -2], "right up": [-1, 2], "right down": [1, 2],
# }
#
#
# def check_knights():
#     result = {}
#     for row, col in pos_knights:
#         for m_row, m_col in movement.values():
#             knight_row, knight_col = row + m_row, col + m_col
#             if check_valid_index(knight_row, knight_col) and matrix[knight_row][knight_col] == 'K':
#









# rows = int(input())
# cols = rows
#
# board = [list(input()) for _ in range(rows)]
#
# moves = 0
# knight_move_positions = [0, []]
# current_pos = []
# killed_knights = 0
#
# for row in range(rows):
#     for col in range(cols):
#         if board[row][col] == 'K':
#             current_pos = [row, col]
#             if 0 <= row - 2 < rows and 0 <= col - 1 < cols:
#                 if board[row - 2][col - 1] == 'K':
#                     moves += 1
#             if 0 <= row - 2 < rows and 0 <= col + 1 < cols:
#                 if board[row - 2][col + 1] == 'K':
#                     moves += 1
#             if 0 <= row - 1 < rows and 0 <= col - 2 < cols:
#                 if board[row - 1][col - 2] == 'K':
#                     moves += 1
#             if 0 <= row - 1 < rows and 0 <= col + 2 < cols:
#                 if board[row - 1][col + 2] == 'K':
#                     moves += 1
#             if 0 <= row + 1 < rows and 0 <= col - 2 < cols:
#                 if board[row + 1][col - 2] == 'K':
#                     moves += 1
#             if 0 <= row + 1 < rows and 0 <= col + 2 < cols:
#                 if board[row + 1][col + 2] == 'K':
#                     moves += 1
#             if 0 <= row + 2 < rows and 0 <= col - 1 < cols:
#                 if board[row + 2][col - 1] == 'K':
#                     moves += 1
#             if 0 <= row + 2 < rows and 0 <= col + 1 < cols:
#                 if board[row + 2][col + 1] == 'K':
#                     moves += 1
#             if moves > knight_move_positions[0]:
#                 knight_move_positions[0] = moves
#                 knight_move_positions[1] = current_pos
#             moves = 0
#     if knight_move_positions[0] > 0:
#         r = knight_move_positions[1][0]
#         c = knight_move_positions[1][0]
#         board[r][c] = '0'
#         killed_knights += 1
#         knight_move_positions = [0, []]
#
# print(knight_move_positions)
# for row in board:
#     print(''.join(row))
# print(killed_knights)
