def cookbook(*args):
    cookbook = {}
    result = ''
    for name, cuisine, ingredients in args:
        if cuisine not in cookbook:
            cookbook[cuisine] = {name: ingredients}
        cookbook[cuisine].update({name: ingredients})

    sorted_cuisines = sorted(cookbook.items(), key=lambda kvp: (-len(kvp[1]), kvp[0]))
    for key, value in sorted_cuisines:
        result += f"{key} cuisine contains {len(value)} recipes:\n"

        sorted_recipes = sorted(value.items(), key=lambda kvp: kvp[0])
        for name, ingredients in sorted_recipes:
            result += f"  * {name} -> Ingredients: {', '.join(ingredients)}\n"

    return result


print(cookbook(
    ("Spaghetti Bolognese", "Italian", ["spaghetti", "tomato sauce", "ground beef"]),
    ("Margherita Pizza", "Italian", ["pizza dough", "tomato sauce", "mozzarella"]),
    ("Tiramisu", "Italian", ["ladyfingers", "mascarpone", "coffee"]),
    ("Croissant", "French", ["flour", "butter", "yeast"]),
    ("Ratatouille", "French", ["eggplant", "zucchini", "tomatoes"])
))


print(cookbook(
    ("Pad Thai", "Thai", ["rice noodles", "shrimp", "peanuts", "bean sprouts", "tamarind sauce"])
    ))

print(cookbook(
    ("Spaghetti Bolognese", "Italian", ["spaghetti", "tomato sauce", "ground beef"]),
    ("Margherita Pizza", "Italian", ["pizza dough", "tomato sauce", "mozzarella"]),
    ("Tiramisu", "Italian", ["ladyfingers", "mascarpone", "coffee"]),
    ("Croissant", "French", ["flour", "butter", "yeast"]),
    ("Ratatouille", "French", ["eggplant", "zucchini", "tomatoes"]),
    ("Sushi Rolls", "Japanese", ["rice", "nori", "fish", "vegetables"]),
    ("Miso Soup", "Japanese", ["tofu", "seaweed", "green onions"]),
    ("Guacamole", "Mexican", ["avocado", "tomato", "onion", "lime"])
    ))

from unittest import TestCase, main


class Test(TestCase):
    def test_cookbook(self):
        result = cookbook(
            ("Spaghetti Bolognese", "Italian", ["spaghetti", "tomato sauce", "ground beef"]),
            ("Margherita Pizza", "Italian", ["pizza dough", "tomato sauce", "mozzarella"]),
            ("Tiramisu", "Italian", ["ladyfingers", "mascarpone", "coffee"]),
            ("Croissant", "French", ["flour", "butter", "yeast"]),
            ("Ratatouille", "French", ["eggplant", "zucchini", "tomatoes"])
        )

        expected = """Italian cuisine contains 3 recipes:
  * Margherita Pizza -> Ingredients: pizza dough, tomato sauce, mozzarella
  * Spaghetti Bolognese -> Ingredients: spaghetti, tomato sauce, ground beef
  * Tiramisu -> Ingredients: ladyfingers, mascarpone, coffee
French cuisine contains 2 recipes:
  * Croissant -> Ingredients: flour, butter, yeast
  * Ratatouille -> Ingredients: eggplant, zucchini, tomatoes"""

        self.assertEqual(result.strip(), expected)

if __name__ == '__main__':
    main()
